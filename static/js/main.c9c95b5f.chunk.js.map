{"version":3,"sources":["components/Nav.js","components/Header.js","components/Spinner.js","components/Countrie.js","components/Countries.js","components/CountrieInfo.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","onSubmit","handleSubmit","style","lightMode","boxShadow","backgroundColor","name","type","placeholder","value","countrieSearch","onChange","handleChange","color","onClick","handleRegion","Navbar","lightModeCheck","handleClick","override","css","Spinner","state","loading","size","this","spinnerColor","React","Component","Countrie","backgroundImage","countrie","flag","backgroundSize","backgroundPosition","to","population","region","capital","Countries","countries","map","key","numericCode","CountrieInfo","borders","useState","setCountrie","setLoading","id","useParams","useEffect","fetch","then","response","json","data","loader","src","alt","title","nativeName","subregion","topLevelDomain","currencies","code","languages","border","App","setCountries","setCountrieSearch","setTheme","Header","event","path","exact","target","preventDefault","console","log","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9c95b5f.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Nav(props) {\r\n  return(\r\n    <nav className=\"container\">\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div className=\"search-countrie\" style={!props.lightMode ? {boxShadow: \"0px 0px 5px 2px rgba(43, 57, 69, 0.62)\", backgroundColor: \"hsl(209, 23%, 22%)\"} : null}>\r\n          <ion-icon name=\"search-outline\"></ion-icon>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search for a country...\"\r\n            name=\"countrieSearch\"\r\n            value={props.countrieSearch}\r\n            onChange={props.handleChange}\r\n            style={props.lightMode ? null : {backgroundColor: \"hsl(209, 23%, 22%)\", color: \"white\"}}\r\n          />\r\n        </div>\r\n        <select style={!props.lightMode ? {boxShadow: \"0px 0px 5px 2px rgba(43, 57, 69, 0.62)\", backgroundColor: \"hsl(209, 23%, 22%)\", color: \"white\"} : null} onClick={props.handleRegion}>\r\n          <option value=\"\">Filter by region</option>\r\n          <option value=\"africa\">Africa</option>\r\n          <option value=\"americas\">America</option>\r\n          <option value=\"asia\">Asia</option>\r\n          <option value=\"europe\">Europe</option>\r\n          <option value=\"oceania\">Oceania</option>\r\n        </select>\r\n      </form>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React from \"react\"\r\nimport \"../index.css\"\r\n\r\nfunction Navbar(props) {\r\n  function lightModeCheck(lightMode) {\r\n    return lightMode ? {color: \"black\"} : {color: \"white\"}\r\n  }\r\n\r\n  return(\r\n    <header>\r\n      <div className=\"shadow\" style={props.lightMode ? {backgroundColor: \"white\"} : {backgroundColor: \"hsl(209, 23%, 22%)\"}}>\r\n        <div className=\"pre-nav container\">\r\n          <h1 style={lightModeCheck(props.lightMode)}>Where in the world?</h1>\r\n          <button onClick={props.handleClick} style={lightModeCheck(props.lightMode)}>\r\n            <ion-icon name=\"moon-outline\" style={lightModeCheck(props.lightMode)}></ion-icon>\r\n            Dark Mode\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClockLoader from \"react-spinners/ClockLoader\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 50px auto 0 auto;\r\n  border-color: black;\r\n`;\r\n\r\nclass Spinner extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sweet-loading\">\r\n        <ClockLoader\r\n          css={override}\r\n          size={50}\r\n          color={this.props.spinnerColor}\r\n          loading={this.state.loading}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner\r\n","import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Countrie(props) {\r\n  return (\r\n    <div className=\"countrie\"\r\n      style={!props.lightMode ? {boxShadow: \"0px 0px 5px 2px rgba(43, 57, 69, 0.5)\", backgroundColor: \"hsl(209, 23%, 22%)\", color: \"white\"} : null}\r\n    >\r\n      <div style={{backgroundImage: `url(${props.countrie.flag})`, backgroundSize: 'cover', backgroundPosition: 'center'}} className=\"countrie-flag\"/>\r\n      <div className=\"countrie-info\">\r\n        <p className=\"countrie-name\">\r\n          <Link to={`/countries/${props.countrie.name}`} style={!props.lightMode ? {color: \"white\"} : null}>\r\n            {props.countrie.name}\r\n          </Link>\r\n        </p>\r\n        <p><span className=\"countrie-propertie\">Population:</span> {props.countrie.population}</p>\r\n        <p><span className=\"countrie-propertie\">Region:</span> {props.countrie.region}</p>\r\n        <p><span className=\"countrie-propertie\">Capital:</span> {props.countrie.capital}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countrie\r\n","import React from \"react\"\r\nimport Countrie from \"./Countrie\"\r\n\r\nfunction Countries(props) {\r\n  return(\r\n    <section className=\"container countries\">\r\n      {props.countries.map(countrie => (\r\n        <Countrie countrie={countrie} key={countrie.numericCode} lightMode={props.lightMode}/>\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Countries\r\n","import Spinner from './Spinner'\r\nimport React, {useState, useEffect} from \"react\"\r\nimport { useParams, Link } from \"react-router-dom\"\r\n\r\nfunction CountrieInfo(props) {\r\n  const [countrie, setCountrie] = useState({})\r\n  const [loading, setLoading] = useState(true)\r\n  let { id } = useParams()\r\n\r\n  useEffect(() => {\r\n    fetch(`https://restcountries.eu/rest/v2/name/${id}?fullText=true`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      setCountrie(data[0])\r\n      setLoading(!loading)\r\n    })\r\n  }, [])\r\n\r\n  const countrieBorders = (borders) => borders.map(border => border + \" \")\r\n\r\n  return (\r\n    <div className=\"detailed-countrie container\">\r\n      <div className=\"back-button\">\r\n        <Link to=\"/\" style={props.lightMode ? {backgroundColor: \"white\"} : {boxShadow: \"0px 0px 5px 7px rgba(43, 57, 69, 0.5)\", backgroundColor: \"hsl(209, 23%, 22%)\", color: \"white\"}}>\r\n          <p><ion-icon name=\"arrow-back-outline\"></ion-icon> Back</p>\r\n        </Link>\r\n      </div>\r\n      {loading ? <Spinner loader=\"MoonLoader\" spinnerColor={props.lightMode ? \"#000000\" : \"#ffffff\"}/> :\r\n        countrie ?\r\n          <div className=\"countrie-details\" style={props.lightMode ? null : {color: \"white\"}}>\r\n            <div className=\"countrie-details_flag\">\r\n              <img src={countrie.flag} alt={countrie.name + \"'s flag'\"} title={countrie.name + \" flag\"}/>\r\n            </div>\r\n            <div className=\"countrie-details_data\">\r\n              <h1 className=\"countrie-name\">{countrie.name}</h1>\r\n              <div>\r\n                <div className=\"leftInfo\">\r\n                  <p><span className=\"countrie-propertie\">Native name: </span>{countrie.nativeName}</p>\r\n                  <p><span className=\"countrie-propertie\">Population: </span>{countrie.population}</p>\r\n                  <p><span className=\"countrie-propertie\">Region: </span>{countrie.region}</p>\r\n                  <p><span className=\"countrie-propertie\">Sub region: </span>{countrie.subregion}</p>\r\n                  <p><span className=\"countrie-propertie\">Capital: </span>{countrie.capital}</p>\r\n                </div>\r\n                <div className=\"rightInfo\">\r\n                  <p><span className=\"countrie-propertie\">Top level domain: </span>{countrie.topLevelDomain}</p>\r\n                  <p><span className=\"countrie-propertie\">Currencies: </span>{countrie.currencies[0].code} ({countrie.currencies[0].name})</p>\r\n                  <p><span className=\"countrie-propertie\">Languages: </span>{countrie.languages[0].name}</p>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p><span className=\"countrie-propertie countrie-borders\">Border Countries: </span></p>\r\n                <span>\r\n                  {\r\n                    countrieBorders(countrie.borders).map(border => border)\r\n                  }\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n         : \"Country not found\"\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountrieInfo\r\n","import React, { useState, useEffect } from \"react\"\nimport './App.css';\nimport Nav from './components/Nav'\nimport Header from './components/Header'\nimport Spinner from './components/Spinner'\nimport Countries from './components/Countries'\nimport CountrieInfo from './components/CountrieInfo'\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom'\n\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [countrieSearch, setCountrieSearch] = useState(\"\")\n  const [lightMode, setTheme] = useState(true)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountries(data)\n      setLoading(!loading)\n    })\n  }, [])\n\n  const handleRegion = (event) => {\n    if(event.target.value !== \"\") {\n      fetch(`https://restcountries.eu/rest/v2/region/${event.target.value}`)\n      .then(response => response.json())\n      .then(data => setCountries(data))\n    } else {\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data => setCountries(data))\n    }\n  }\n\n  const handleClick = (event) => {\n    setTheme(!lightMode)\n  }\n\n  const handleChange = (event) => {\n    setCountrieSearch(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    console.log(`https://restcountries.eu/rest/v2/name/${countrieSearch}`)\n    if(countrieSearch.length > 0) {\n      fetch(`https://restcountries.eu/rest/v2/name/${countrieSearch}`)\n      .then(response => response.json())\n      .then(data => setCountries(data))\n    } else {\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data => setCountries(data))\n    }\n  }\n\n  return (\n    <Router>\n      <div className={lightMode ? \"App\"  : \"darkApp\"}>\n        <Header handleClick={handleClick} lightMode={lightMode}/>\n        <div className=\"background\">\n          <Switch>\n\n            <Route path=\"/\" exact>\n              <Nav handleChange={handleChange} handleSubmit={handleSubmit} countrieSearch={countrieSearch} lightMode={lightMode} handleRegion={handleRegion}/>\n              {loading ? <Spinner loader=\"MoonLoader\" spinnerColor={lightMode? \"#000000\" : \"#ffffff\"}/> :\n                countries.length > 0 ? <Countries countries={countries} lightMode={lightMode}/> : \"Country not found\"\n              }\n            </Route>\n\n            <Route path=\"/countries/:id\">\n              <CountrieInfo lightMode={lightMode}/>\n            </Route>\n\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}